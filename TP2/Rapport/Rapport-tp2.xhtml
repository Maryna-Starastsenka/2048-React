<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Rapport TP2</title>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="stylesheet" href="Rapport-tp2.css"/>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css"/>
    </head>
    <body>
        <div class="container">
            <div class="page-header p-3">
                <h1>Étudiante : Maryna Starastsenka</h1>
                <h1>Matricule : 20166402</h1>
                <a href="http://www-ens.iro.umontreal.ca/~starastm/2048-game/2048/index.xhtml" class="text-warning">Lien vers le jeu 2048 déployé sur le serveur du DIRO</a>
                
            </div>
            
            <div class="title">
                <h1>IFT3225 - Technologie de l'Internet</h1>
                <h1>Rapport du TP2</h1>
            </div>
            
            <div class="block">
                <h2>Travail préparatoire</h2>
                <div class="block-text">
                    <p>
                        Le projet du TP2 demande des connaissances profondes du langage de programmation JavaScript et du framework React.
                        Comme c’était ma première utilisation de React, il était important d'en comprendre les principes, la syntaxe, 
                        les meilleures pratiques et les notions à utiliser lors de ce travail en particulier.  
                    </p>
                    <p>
                        La première semaine de travail fut consacrée à l'apprentissage du langage et au travail de recherche associé. Il s'agissait également de participer au cours en ligne et d'en étudier les exemples présentés. 
                        La préparation de l’environnement de travail fut également un point important à ce stade. 
                        Comme le codage direct sur le serveur du DIRO me semblait moins flexible, j’ai découvert l’outil WebStorm qui m'est apparu plus robuste et facile à utiliser lorsqu'il s'agit de développement web.
                    </p>
                </div>
            </div>
            <hr class="solid"/>
            
            <div class="block">
                <h2>Choix de "Components" et définition des flux de données entre eux</h2>
                <div class="block-text">
                    <p>
                        La première étape du travail était d’établir les "Components" de jeu 2048 à partir de l’interface donnée. Voici la liste des composants choisis pour le jeu :
                    </p>
                    <ul>
                        <li>&lt;Game : composant parent du jeu qui contient la logique du jeu.</li>
                        <li><span id="blue">&lt;Header/&gt;</span> : composant qui contient le titre du jeu, le nombre de pas effectués et le bouton "New Game" pour commencer une nouvelle partie.</li>    
                        <li><span id="red">&lt;Board/&gt;</span> : composant qui contient les carrés avec des valeurs et leurs coordonnées sur le board.</li>     
                        <li><span id="green">&lt;Square/&gt;</span> : composant du jeu manipulé par l'utilisateur avec une valeur.</li>
                        <li><span id="purple">&lt;Notification/&gt;</span> : composant qui affiche un message quand le jeu est perdu ou gagné.</li>
                    </ul>
                    <div class="image">
                        <img id="img-components" src="./images/components.png" alt="Components du jeu 2048"/>
                        <p>Figure 1 - Séparation du jeu 2048 en composants</p>
                    </div>
                    <p>
                        Par la suite, il a fallu choisir les "Props" qui sont les attributs disponibles dans le composant. 
                        Ils permettent donc de configurer les composants et de faire redescendre les données au travers de l’arborescence de composants.
                    </p>
                    <p>
                        Finalement, le "State" était défini afin d’assurer la manipulation des données lors de l’utilisation du jeu.
                    </p>
                    <p>
                        Représentons ci-dessous le diagramme qui montre les flux de données entre les composants définis en encluant les flux à double sens.
                    </p>
                    <div class="image">
                        <img id="diagram" src="./images/diagram.png" alt="Diagramme des flux de données entre les composants"/>
                        <p>Figure 2 -  Diagramme des flux de données entre les composants du jeu 2048</p>
                    </div>    
                 </div>
            </div>
            <hr class="solid"/>
            
            <div class="block">
                <h2>Difficultés rencontrées lors de la réalisation du projet</h2>
                <div class="block-text">
                    <p>
                        La difficulté principale était de définir les "Props" et le "State", ainsi que d'organiser la transmission de données entre les composants afin de créer l'interaction du jeu et d'afficher les changements sur l'interface.
                        Le débogage et les tests m'ont permis de mieux comprendre les notions de "Props" et "State".   
                    </p>
                    <p>
                        Les manipulations avec le board ont demandé plusieurs essais. Finalement, le board du jeu fut représenté sous la forme d'une matrice où chaque ligne et colonne représente une ligne et une colonne du board. 
                        À chaque fois qu’on déplace les carrés ou que l'on fait une rotation du board, nous créons un nouveau board rempli de zéros, puis on copie les carrés d'une manière définie.      
                    </p>
                    <p>
                        La création d'un code optimal sans répétition était un autre défi. La logique principale du jeu inclut 4 actions que l’utilisateur peut effectuer : bouger les carrés vers la gauche, le haut, la droite ou le bas. 
                        Cela peut donner l’impression que tous les déplacements sont absolument indépendants en termes de code. Par contre, la rotation ou le retournement des carrés du board permet de réutiliser les mêmes fonctions.     
                    </p>         
                </div>
            </div>
            <hr class="solid"/>
            
            <div class="block">
                <div class="block-text">
                    <p>
                        On peut donc conclure que le projet a permis d’acquérir des connaissances en React et m'a permis de créer un programme en commençant par le découpage du jeu en composants, la définitions des "Props"  et du "State" jusqu’à la réalisation complète en utilisant  JavaScript et CSS.  
                    </p>
                </div>
            </div>
        </div>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js"></script>
    </body>
</html>